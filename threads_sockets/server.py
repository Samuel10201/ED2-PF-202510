"""
server.py

Este m√≥dulo act√∫a como un servidor TCP que:
1. Se conecta a una base de datos MySQL.
2. Extrae un conjunto de datos y lo convierte en un DataFrame.
3. Escucha conexiones entrantes de m√∫ltiples clientes simult√°neamente.
4. Env√≠a el DataFrame serializado a cada cliente.
5. Recibe resultados procesados por los clientes.

"""

# üì¶ Importaci√≥n de librer√≠as necesarias para la conexi√≥n, serializaci√≥n, concurrencia, visualizaci√≥n y manejo de datos
import socket
import threading
import pickle
import pandas as pd
import time
import os
import json
import pyarrow as pa
from fastavro import writer, parse_schema
import matplotlib.pyplot as plt
import datetime
from decimal import Decimal
import numpy as np
from multiprocessing import Process, Manager
from mysql.connector import connect, Error, errorcode
from os import environ
from dotenv import load_dotenv
import math
import io

# üìÅ Carga de variables de entorno (credenciales y configuraci√≥n de la base de datos)
load_dotenv()

# üìå Configuraci√≥n para la conexi√≥n a la base de datos
# Se llaman las variables de entorno para evitar exponer credenciales sensibles
config = {
    "user": environ['DATABASE_USERNAME'],
    "password": environ['DATABASE_PASSWORD'],
    "host": environ['DATABASE_HOST'],
    "database": environ['DATABASE_NAME'],
    "charset": 'utf8'
}

# üîå Funci√≥n para establecer la conexi√≥n a la base de datos MySQL
def get_connection():
    """
    Establece una conexi√≥n con la base de datos MySQL utilizando
    las credenciales cargadas desde las variables de entorno.

    Returns:
        mysql.connector.connection.MySQLConnection: Objeto de conexi√≥n activa,
        o None si ocurre un error.
    """
    try:
        print("Connecting to the database...\n config: ", config)
        return connect(**config)
    except Error as err:
        if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
            print("‚ùå Usuario o contrase√±a incorrectos")
        elif err.errno == errorcode.ER_BAD_DB_ERROR:
            print("‚ùå La base de datos no existe")
        else:
            print("‚ùå Error desconocido:", err)
        return None

# üßÆ Funci√≥n que ejecuta una consulta y devuelve los resultados
def get_data(connection: connect, query: str):
    """
    Ejecuta una consulta SQL en la base de datos proporcionada y
    devuelve los resultados.

    Args:
        connection (mysql.connector.connection.MySQLConnection): Conexi√≥n activa a la base de datos.
        query (str): Consulta SQL a ejecutar.

    Returns:
        list[tuple]: Resultados obtenidos de la consulta.
    """
    my_cursor = connection.cursor()
    my_cursor.execute(query)
    data = my_cursor.fetchall()
    my_cursor.close()
    return data

# üìã Funci√≥n que carga todos los datos desde la base de datos y los convierte en un DataFrame
def get_dataframe():
    """
    Carga los datos desde la base de datos MySQL y los convierte en un DataFrame de Pandas.

    Returns:
        pd.DataFrame: DataFrame que contiene los registros de la tabla UN.VENTAS.
    """
    cnx = get_connection()
    print("[üì•] Cargando datos desde la base de datos...")

    inicio = time.time()
    data = get_data(cnx, "SELECT * FROM UN.VENTAS")
    print(time.time() - inicio)  # Tiempo que tarda la consulta

    # Definir nombres de columnas esperados para el DataFrame
    df = pd.DataFrame(data, columns=[
        'ID_VENTA', 'FECHA_VENTA', 'ID_CLIENTE', 'ID_EMPLEADO',
        'ID_PRODUCTO', 'CANTIDAD', 'PRECIO_UNITARIO', 'DESCUENTO', 'FORMA_PAGO'
    ])
    cnx.close()
    print(f"[‚úÖ] Datos cargados: {len(df)} registros.")
    return df
def graficar_resultados(formats_dict, client_id):
    """
    Genera una gr√°fica de barras que muestra los tiempos de serializaci√≥n para
    distintos formatos.

    Args:
        formats_dict (dict): Diccionario con nombre del formato como clave y tiempo en segundos como valor.
        client_id (str): Nombre o identificador del cliente que se est√° graficando.
    """
    formatos = list(formats_dict.keys())
    tiempos = list(formats_dict.values())

    plt.figure(figsize=(8, 5))
    plt.bar(formatos, tiempos, color='skyblue')
    plt.ylabel('Tiempo de serializaci√≥n (s)')
    plt.title(f'Tiempos de serializaci√≥n por formato - Cliente {client_id}')
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()

    filename = f"grafica_serializacion_{client_id}.png"
    plt.savefig(filename)
    print(f"[üìä] Gr√°fica guardada como: {filename}")
    plt.close()

# ü§ù Funci√≥n que maneja la conexi√≥n con un cliente espec√≠fico
def handle_client(conn, addr, df):
    """
    Maneja la conexi√≥n con un cliente:
    - Env√≠a un DataFrame serializado.
    - Espera y recibe resultados procesados desde el cliente.

    Args:
        conn (socket.socket): Objeto de conexi√≥n con el cliente.
        addr (tuple): Direcci√≥n IP y puerto del cliente.
        df (pd.DataFrame): DataFrame que ser√° enviado al cliente.
    """
    print(f"[+] Conectado con {addr}")

    # üîÑ Serializar el DataFrame
    data_bytes = pickle.dumps(df)

    # Enviar primero el tama√±o del mensaje para que el cliente sepa cu√°nto esperar
    conn.sendall(len(data_bytes).to_bytes(8, 'big'))
    conn.sendall(data_bytes)

    # ‚¨ÖÔ∏è Esperar tama√±o del mensaje de respuesta
    length = int.from_bytes(conn.recv(8), 'big')

    # Recibir y deserializar los resultados
    results = pickle.loads(conn.recv(length))
    
        # üìà Mostrar resultados procesados recibidos del cliente
    print(f"[{addr}] Resultados recibidos:\n", results)

    # üîç Si contiene tiempos de serializaci√≥n, graficarlos
    if isinstance(results, dict) and "format_times" in results and "client_id" in results:
        graficar_resultados(results["format_times"], results["client_id"])


    # üìà Mostrar resultados procesados recibidos del cliente
    print(f"[{addr}] Resultados recibidos:\n", results)

    conn.close()

# üöÄ Funci√≥n principal que inicia el servidor y acepta m√∫ltiples conexiones
def start_server(df):
    """
    Inicia el servidor, escucha en un puerto definido y acepta m√∫ltiples
    conexiones de clientes, delegando cada una a un hilo nuevo.

    Args:
        df (pd.DataFrame): DataFrame que ser√° enviado a cada cliente conectado.
    """
    HOST = '0.0.0.0'  # Escucha en todas las interfaces de red disponibles
    PORT = 9999       # Puerto en el que se escucha

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen()
        print("[üü¢] Servidor escuchando en el puerto", PORT)

        while True:
            conn, addr = s.accept()
            # üßµ Crear un nuevo hilo para manejar la conexi√≥n de este cliente
            thread = threading.Thread(target=handle_client, args=(conn, addr, df))
            thread.start()
            print(f"[üë•] N√∫mero de conexiones activas: {threading.active_count() - 1}")

# üèÅ Punto de entrada principal del servidor
if __name__ == "__main__":
    df = get_dataframe()   # Obtener datos desde la base de datos
    start_server(df)       # Iniciar servidor con el DataFrame cargado